太好了！下面给你一份“从零到熟练”的**完整使用教程**（基于你目前这套插件 + `picapi` 的实现），照着用基本就能把它吃透了。你可以收藏这份当手册。

---

# 插件做什么？

* **#/来一张 \[分类表达式]**：从图库抽一张图发出来（支持按分类、权重、子目录）。
* **#/评分 <0\~5的任意小数> \[备注]**：给“当前会话里上一次发出的那张图”打分（多次评分会计算均分）。
* **#/图类目**：列出顶级分类（顶层文件夹名）。
* **#/重建索引 \[清理]**（别名：**#/更新图库** / **#/刷新图库** / **#/reindex**）：扫描磁盘，把图片登记到数据库；“清理”会同步移除数据库里已不存在的文件记录。

> 评分会写回元数据：
>
> * 数据库用于保存“原始打分”（支持小数）。
> * **写入 XMP** 时只写**整数分**（四舍五入并 clamp 到 0～5）。
> * 会**覆写**旧的评分标签：重写 `XMP:Rating`，清理旧的 `Subject` 中 `rated / score:* / count:*` 后再写入最新的三项。
> * 不会破坏你其它的 `Subject` 标签。

---

# 一、快速上手（聊天命令）

### 1）随机/按类抽图

* 纯随机：
  `#来一张`
* 指定一个分类（顶层或多级目录都行）：
  `#来一张 风景`
  `#来一张 壁纸/风景`
* 多分类加权：
  `#来一张 风景:3,人像:1`（“风景”优先级是“人像”的 3 倍）

> 说明：插件把你的参数原样传给 `picapi` 的 `/random_pic?cat=...`。
> `picapi` 的**默认择图策略**是“**评分次数最少优先**”（可配置，见下文“高级：择图策略”）。

### 2）给刚发的图打分

* 基本用法：
  `#评分 4.5`
* 带备注：
  `#评分 3.8 色彩舒服`
* 约束：

  * 插件接受 **0\~5 的任意小数**。超出范围/非数字会被**忽略**（不回复、不写入）。
  * **必须是同一个会话**里、对“上一张由 `#来一张` 发出的图”进行评分；否则会提示“请先来一张”。

> 写回元数据：XMP 只会写入**整数分**（例如 4.5 → 5）；数据库仍保留浮点数，继续计算均分。

### 3）查看分类

* `#图类目`
  → 返回顶级子目录列表（可用于 `#来一张 xxx`）

### 4）更新数据库（重建索引）

* 只补齐新图（不清理）：
  `#重建索引`（别名：`#更新图库`、`#刷新图库`、`#reindex`）
* 补齐并清理“库里有但磁盘没有”的记录：
  `#重建索引 清理`（也支持 `purge / cleanup / true / 是 / 1`）
* 何时用？

  * 初次部署或**大量新增/删除图片**后执行一次；
  * 想确保“最少优先”策略能覆盖新图时执行一次；
  * 平时零星增减可以隔一段时间再跑。

---

# 二、分类表达式怎么写？

1. **单一分类**：顶层文件夹名

   * `#来一张 风景`
2. **多级目录**：从图库根开始的相对路径

   * `#来一张 壁纸/风景`
3. **多分类加权**：用逗号分隔，冒号设置权重

   * `#来一张 风景:3,人像:1,建筑:1`
   * 没写权重的默认为 1：`风景,人像` ≈ `风景:1,人像:1`

> 小技巧：先用 `#图类目` 看顶级类目，再逐级补全路径测试。

---

# 三、高级：择图策略（更聪明地抽图）

`picapi` 支持 3 种策略，默认 **min（评分次数最少优先）**：

* `min`：始终在“评分次数最少”的图片里随机，优先探索“冷门/未评分”的图。
* `weighted`：从“少评的一批”里按权重抽样（权重 = 1/(cnt+1)^alpha，`alpha` 越大越偏好未评分）。
* `off`：关闭偏好，完全均匀随机。

### 配置位置（docker-compose `picapi` 服务里）

```yaml
environment:
  - PICK_BIAS=min          # off|min|weighted
  - PICK_BIAS_ALPHA=1.0    # 仅 weighted 时有效
  - WEIGHTED_POOL=500      # weighted 时先取最少的一批 N，再在这批里随机
```

> 说明：你的插件当前**不**通过命令切换策略，走的是 `picapi` 的全局默认。想在聊天里临时切换也行，我可以帮你把 `#来一张` 的参数解析扩展为：
> `#来一张 随机` → bias=off，
> `#来一张 加权1.5` → bias=weighted\&alpha=1.5。
> （需要的话跟我说，我给你补上这段解析。）

---

# 四、评分与元数据写回规则

* **聊天评分**：接受 `0~5` 的任意小数；
* **数据库**：累加评分次数、计算均分（浮点）；
* **写入 XMP**（触发条件：评分计数达到你设定的阈值，例如 `WRITE_META_MIN_COUNT=1`）：

  * `XMP:Rating` 写入**整数分**（四舍五入后 clamp 到 0\~5）；
  * `XMP:Subject` 采用**覆写策略**：

    * 清理旧的 `rated / score:* / count:*`；
    * 保留其它 Subject；
    * 追加 `rated`、`score:<整数>`、`count:<次数>` 三个条目；
* （可选）你也可以在 `app.py` 里加一条把“原始均分（小数）”写入 `XMP:Description` 或自定义 tag；需要我可以把那一行也给你。

---

# 五、性能建议（有上千张图也很稳）

你现在已经切到“**数据库直选**”的 `/random_pic`（`ORDER BY cnt ASC, RANDOM() LIMIT 1`），只要把图库同步到 DB，就不会再全盘扫目录，非常快。

**关键就是记得在这些场景跑一下 `#重建索引`：**

* 初次部署；
* 批量导入/删除图片；
* 目录结构大改。

> 我也为你加了 SQLite 索引（`cnt / category / relpath`），挑图时开销基本就是一次 SQL。

---

# 六、常见问题（遇到就这么排）

1. **发 `#来一张` 却像普通聊天那样回复**

   * 面板 → 插件/Star 管理：确认 `pic_rater` 已启用。
   * 日志里应看到：`正在载入插件 astrbot_plugin_pic_rater`，并显示插件名/作者；
   * 你的唤醒前缀是 `#`，命令名是**不带斜杠**的：

     * ✅ `#来一张`、`#评分 4`
     * ❌ `#/来一张`（除非你特意把命令注册成带 `/` 的名字）

2. **控制台报 404：GET [http://picapi:8000/random](http://picapi:8000/random)**

   * 你的接口是 `/random_pic`，不是 `/random`；插件已改好，如仍报 404，检查插件是否重启并生效。

3. **图能打开但机器人发不出来**

   * `picapi` 返回的 `url` 是 `/static/...`，插件会自动补为 `http://picapi:8000/static/...`（容器内可达）。
   * 确认 Napcat 与 AstrBot 容器**都在同一 docker 网络**；
   * 如果你想让“外网”也能直接点开图片，把 **`PICAPI_URL`**（插件环境变量）改为你的公网域名/IP。

4. **评分没有写进 XMP 或写回很慢**

   * 查看 `WRITE_META_MIN_COUNT`（写元数据的最小评分次数门槛）是否 > 1；
   * `picapi` 容器里必须有 `exiftool`，日志是否报错；
   * 图片是否只读/权限被锁。

5. **重建索引失败或很慢**

   * 图太多时会跑一会儿，插件里已把 HTTP 超时设到 120s；
   * 也可直接 `curl` 本机 `:8000/reindex`，看 JSON 返回是否正常；
   * 大批量删除后记得加“清理”：`#重建索引 清理`。

---

# 七、环境变量一览（你可能会用到）

### AstrBot 插件（`astrbot` 容器）

```env
PICAPI_URL=http://picapi:8000   # 插件访问 picapi 的基址（容器内名）
PICAPI_TIMEOUT=15               # 插件请求超时秒数
```

### picapi 服务（`picapi` 容器）

```env
ALLOWED_SUFFIXES=.jpg,.jpeg,.png,.gif,.webp   # 允许的图片后缀
STATIC_PREFIX=/static                         # 静态路径前缀
RECURSIVE=true                                # 递归子目录
WRITE_META_MIN_COUNT=1                        # 达到多少次评分才写 XMP
# 覆写评分标签开关（你已经启用覆写逻辑）
OVERWRITE_SUBJECT_SCORE=true

# 择图策略
PICK_BIAS=min             # off|min|weighted
PICK_BIAS_ALPHA=1.0       # weighted 指数，越大越偏向未评分
WEIGHTED_POOL=500         # weighted 预选池大小（从“最少的一批”里再做随机）

#（如果你还保留了抽样+缓存版）
SAMPLE_SIZE=400
DIR_CACHE_TTL=60
```

---

# 八、权限（可选但强烈建议）

“重建索引”会扫盘、可能占用 I/O。建议**只允许你自己**触发：

* 方案：在插件 `cmd_reindex` / `cmd_update_gallery` / … 这些方法开头加一段判断：

  ```python
  ALLOWED_UIDS = {"你的QQ号", "另一个管理员QQ号"}
  uid = getattr(event, "user_id", None) or getattr(event, "sender_id", None)
  if str(uid) not in ALLOWED_UIDS:
      yield event.plain_result("需要管理员权限。")
      return
  ```

需要我可以把这段直接融合进你的现有 `main.py`。

---

# 九、常用“组合拳”示例

* **稳定探索冷门图**：
  `#重建索引` → `#来一张`（默认 min）→ 看到满意的就 `#评分 4.8 质感好`
* **快速标注一类图**：
  `#来一张 壁纸/风景` → 连续多次（机器人会尽量抽“少评的”）→ 每张 `#评分 x.x`
* **清扫过期条目**：
  删除硬盘上一堆废图 → `#重建索引 清理`
* **临时改成完全随机（如果你已在插件支持）**：
  `#来一张 随机`（或把 `PICK_BIAS=off`，重启 picapi）

---

如果你愿意，我还能顺手给你加上“在聊天里切换策略”的参数解析（`#来一张 随机 / 加权1.5`），以及“榜单/统计”（比如 `#榜单` 查均分最高的 N 张、`#未评分` 抽未评分图片）。告诉我你更想要哪个，我直接给你代码。
